--M Query
M Stands for Mashup
Here Power Query is just a UI, that generates M query in background for each UI operation.

M Query can result a single(salar) value, a list of values, a record and a table

it is case sensitive(#Shared is different from #shared)
#shared to list all the functions(offline reference).
//power query online reference
https://msdn.microsoft.com/en-us/library/mt211003.aspx
https://msdn.microsoft.com/en-us/library/mt807488.aspx
http://office.microsoft.com/en-gb/excel-help/learn-about-power-query-formulas-HA104003958.aspx

--returning a scalar function
let
  Name = "SequelGate "&"Training"
in
   Name
   
--space in named expressions, use # when you have space in named expression
--make sure you return it in the last step
let
  Name = "SequelGate "&"Training",
    #"New Name" = Name&" ,Hyderabad"
in
   #"New Name"

let
    Source = 1+1,
    Source1 = Source*10
in
    Source1
 
 --returning lists
 --ex 1
 let
    Source = {1..20}
in
    Source
--ex 2
let
    Source = {"A".."J"}
in
    Source  


--accessing individual elements, zero based index
let
    Source = {"A".."J"},
    JChar=Source{9}
in
    JChar
// to make this dynamic  go for using PositionOf Function

let
    Source = {"Jagan","Venkat"}
in
    Source
 //Record example
 let
    speakers=[speaker1="Value1",speaker2="Value2"]
in
    speakers


--to access particular column value in table, make sure you add comma in previous statement and return the output the below expression
    #"Tenth ProductName" = #"Changed Type"{9}[EnglishProductName]
    
--only returning a particular column from a table
 CreateList = Table.Column(#"Promoted Headers","EnglishProductName")
in
    CreateList



--no validations here
(x) =>
let
    Source = x+1
in
    Source

--by defining the type of argument we can validate input arguments
(x as number) =>
let
    Source = x+1
in
    Source
----by defining the type of argument we can validate input arguments, use optional to make it optional
//check null replace it with default value
(optional x as number) =>
let
    Source = x+1
in
    Source


//retunring single value
let AddNumbers = (x,y)=>
    let
        a=x+y
    in a
in AddNumbers

//return multiple values
let
    Source = (x as number,y as number) => let
        some={x+y,x-y},
        outputtable=Table.FromRows({{some{0},some{1}}},{"ADD","SUB"})
    in
        outputtable
in
    Source
//making this URL dynamic  write M Query function
http://www.boxofficemojo.com/alltime/world/?pagenum=2&p=.htm

//web service url for BINGMaps API
http://dev.virtualearth.net/REST/v1/Locations?postalCode=98052&key=AvGsnVBd2hb2ZlvAmRMC4xh1CuHgQVLkmFCO7m88UgYhaoF70pxBEJyYIbge6LLf
http://dev.virtualearth.net/REST/v1/Locations?postalCode=10013&key=AvGsnVBd2hb2ZlvAmRMC4xh1CuHgQVLkmFCO7m88UgYhaoF70pxBEJyYIbge6LLf
http://dev.virtualearth.net/REST/v1/Locations?postalCode=10025&key=AvGsnVBd2hb2ZlvAmRMC4xh1CuHgQVLkmFCO7m88UgYhaoF70pxBEJyYIbge6LLf
http://dev.virtualearth.net/REST/v1/Locations?postalCode=10004&key=AvGsnVBd2hb2ZlvAmRMC4xh1CuHgQVLkmFCO7m88UgYhaoF70pxBEJyYIbge6LLf


let GetCoordinates = (postcode)=>
	let Source = Json.Document(Web.Contents("http://dev.virtualearth.net/REST/v1/Locations?postalCode="&Text.From(postcode)&"&key=AvGsnVBd2hb2ZlvAmRMC4xh1CuHgQVLkmFCO7m88UgYhaoF70pxBEJyYIbge6LLf")),
		resourceSets=Source[resourceSets],
		resourceSets1=resourceSets{0},
		resources=resourceSets1[resources],
		resources1=resources{0},
		geocodePoints=resources1[geocodePoints],
		geocodePoints1=geocodePoints{0},
                State= resources1[address][adminDistrict],
                District= try resources1[address][adminDistrict2] otherwise "Unknown",
                Locality= resources1[address][locality],
                Country= resources1[address][countryRegion],
		coordinates=geocodePoints1[coordinates],
		Outputtable=Table.FromRows({{coordinates{0},coordinates{1},State,District,Country,Locality}},{"Latitude","Longitude","State","District","Country","Locality"})
		in Outputtable
in
    GetCoordinates
